# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1                           # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: patria/backend                  # set this to your Amazon ECR repository name
  ECS_SERVICE: patria-backend                     # set this to your Amazon ECS service name
  ECS_CLUSTER: cluster-backend-patria             # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json  # set this to the path to your Amazon ECS task definition file, e.g. aws/task-definition.json
  CONTAINER_NAME: patria-backend                  # set this to the name of the container in the containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    strategy:
      matrix:
        node-version: [ 20.16.0 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          APP_NAME: ${{ secrets.APP_NAME }}
          APP_SERVICE_NAME: ${{ secrets.APP_SERVICE_NAME }}
          JWTKEY: ${{ secrets.JWTKEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          LOG_LEVEL: ${{ secrets.LOG_LEVEL }}
          TOKEN_EXPIRATION: ${{ secrets.TOKEN_EXPIRATION }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_S3_BUCKET_URL: ${{ secrets.AWS_S3_BUCKET_URL }}
          COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
          COGNITO_APP_CLIENT_ID: ${{ secrets.COGNITO_APP_CLIENT_ID }}
          COGNITO_APP_CLIENT_SECRET: ${{ secrets.COGNITO_APP_CLIENT_SECRET }}
          COGNITO_APP_URL_AUTHORITY: ${{ secrets.COGNITO_APP_URL_AUTHORITY }}
        run: |
          docker build --build-arg APP_NAME=${{ env.APP_NAME }} \
                       --build-arg APP_SERVICE_NAME=${{ env.APP_SERVICE_NAME }} \
                       --build-arg JWTKEY=${{ env.JWTKEY }} \
                       --build-arg DATABASE_URL=${{ env.DATABASE_URL }} \
                       --build-arg LOG_LEVEL=${{ env.LOG_LEVEL }} \
                       --build-arg TOKEN_EXPIRATION=${{ env.TOKEN_EXPIRATION }} \
                       --build-arg AWS_REGION=${{ env.AWS_REGION }} \
                       --build-arg AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
                       --build-arg AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
                       --build-arg AWS_BUCKET_NAME=${{ env.AWS_BUCKET_NAME }} \
                       --build-arg AWS_S3_BUCKET_URL=${{ env.AWS_S3_BUCKET_URL }} \
                       --build-arg COGNITO_USER_POOL_ID=${{ env.COGNITO_USER_POOL_ID }} \
                       --build-arg COGNITO_APP_CLIENT_ID=${{ env.COGNITO_APP_CLIENT_ID }} \
                       --build-arg COGNITO_APP_CLIENT_SECRET=${{ env.COGNITO_APP_CLIENT_SECRET }} \
                       --build-arg COGNITO_APP_URL_AUTHORITY=${{ env.COGNITO_APP_URL_AUTHORITY }} \
                       -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

#      - name: Deploy to ECS
#        env:
#          AWS_REGION: us-east-1
#          ECS_CLUSTER_NAME: ${{ env.ECS_CLUSTER }}
#          ECS_SERVICE_NAME: ${{ env.ECS_SERVICE }}
#          CONTAINER_NAME: ${{ env.CONTAINER_NAME }}
#          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
#          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
#          IMAGE_TAG: ${{ env.CONTAINER_NAME }}
#        run: |
#          echo "Updating ECS service with the new image..."
#          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
